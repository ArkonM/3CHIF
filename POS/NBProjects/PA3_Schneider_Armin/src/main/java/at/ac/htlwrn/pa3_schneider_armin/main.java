/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package at.ac.htlwrn.pa3_schneider_armin;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author armin
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTextField1.setText("Startflughafen");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Suchen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(!jTextField1.getText().equals("")) {
            startAirport = null;
            endAirport = null;
            if(searchInDB()) {
                
                setLabels();
                List<Airport> childAirports = getChildAirports(startAirport);
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bitte das Feld ausf√ºllen!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        createDatabaseConnection();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeDatabaseConnection();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    
    
    private Airport startAirport, endAirport;
    
    public Connection con = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void createDatabaseConnection() {
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/Airlines", "app", "app");
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void closeDatabaseConnection() {
        try {
           if (con != null) con.close();
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private boolean searchInDB() {
        
        Statement stmt = null;
        ResultSet rs = null;
        
        List<Airport> startList = new LinkedList<>();
        List<Airport> endList = new LinkedList<>();
        
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("select ID, NAME, IATA, LATITUDE, LONGITUDE from AIRPORT");
            Airport currAirport = null;
            
            while(rs.next()) {
                if(rs.getString("name").toLowerCase().contains(jTextField1.getText().toLowerCase()) 
                        || jTextField1.getText().toLowerCase().equals(rs.getString("IATA").toLowerCase()))
                {
                    
                    currAirport = new Airport(Integer.parseInt(rs.getString("id")), rs.getString("name").trim(), rs.getString("iata").trim()
                                            , Double.parseDouble(rs.getString("latitude")), Double.parseDouble(rs.getString("longitude")));

                    if(jTextField1.getText().toLowerCase().equals(rs.getString("iata").toLowerCase().trim()) || jTextField1.getText().toLowerCase().equals(rs.getString("name").toLowerCase().trim())) {
                        startAirport = currAirport;
                    }
                    
                    
                    if(rs.getString("name").toLowerCase().contains(jTextField1.getText().toLowerCase())) {
                        startList.add(currAirport);
                    }
                   
                    
                }
            }
            
            return true;
            
        } catch(Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (rs != null) rs.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        return true;
    }


    private String getIata(List<Airport> list, String name) {
        
        for(Airport airp : list) {
            if(name.equals(airp.getName())) {
                return airp.getIata();
            }
        }
        return "";
    }

    private void setLabels() {
        
        jTextField1.setText(startAirport.getIata());
        jLabel1.setText(startAirport.getName());
        
    }
    
    private Double getLatitude(List<Airport> list, String name) {
        for(Airport airp : list) {
            if(name.equals(airp.getName())) {
                return airp.getLatitude();
            }
        }
        return 0.0;
    }

    private Double getLongitude(List<Airport> list, String name) {
        for(Airport airp : list) {
            if(name.equals(airp.getName())) {
                return airp.getLongitude();
            }
        }
        return 0.0;
    }
    
    
    private int getID(List<Airport> list, String name) {
        for(Airport airp : list) {
            if(name.equals(airp.getName())) {
                return airp.getID();
            }
        }
        return 0;
    }
    
    

    public List<Airport> getChildAirports(Airport airport) {
        
        Statement stmt = null;
        ResultSet rs = null;
        
        List<Airport> list = new LinkedList<>();
        
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("select AIRPORT.ID, AIRPORT.NAME, AIRPORT.IATA, AIRPORT.LATITUDE, AIRPORT.LONGITUDE, "
                    + "AIRPORT1, AIRPORT2 from ROUTE join AIRPORT on ROUTE.AIRPORT2 = AIRPORT.ID where AIRPORT1 = " + airport.getID());
            
            while(rs.next()) {
                
                Airport airp = new Airport(Integer.parseInt(rs.getString("id")), rs.getString("name").trim(), rs.getString("iata").trim()
                                            , Double.parseDouble(rs.getString("latitude")), Double.parseDouble(rs.getString("longitude")));
                list.add(airp);
            }
            
        } catch(Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (rs != null) rs.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        /*for(Airport a : list)
            System.out.println(a.getName());*/
        return list;
    }

    public Airport getAirportFromIata(String iata) {
        
        Statement stmt = null;
        ResultSet rs = null;
        Airport airp = null;
        
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("select ID, LATITUDE, LONGITUDE, NAME from AIRPORT where IATA = '" + iata + "'");
            
            if(rs.next()) {
                
                airp = new Airport(Integer.parseInt(rs.getString("id")), rs.getString("name").trim(), iata
                                            , Double.parseDouble(rs.getString("latitude")), Double.parseDouble(rs.getString("longitude")));
            }
            
        } catch(Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (rs != null) rs.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        return airp;
    }

}
